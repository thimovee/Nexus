generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Order {
  id          String       @id @default(cuid())
  total       Float?
  address     String?
  phone       String?
  email       String?
  name        String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      OrderStatus? @default(PENDING)
  products    Product[]
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  price           Float
  inventory       Int
  description     String
  colorId         Int?
  images          Json[]
  brandId         Int?
  discount        Float?
  isActive        Boolean? @default(true)
  slug            String   @unique
  nameMeta        String?
  descriptionMeta String?
  categoryId      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  color           Color?   @relation(fields: [colorId], references: [id])
  tags            Tag[]
  brand           Brand?   @relation(fields: [brandId], references: [id])
  reviews         Review[]
  category        Category @relation(fields: [categoryId], references: [id])
  orders          Order[]

  @@index([categoryId])
  @@index([brandId])
  @@index([colorId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Category {
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  slug      String         @unique
  status    FeaturedStatus @default(NOT_FEATURED)
  thumbnail Json[]
  id        Int            @id @default(autoincrement())
  isDeleted Boolean?       @default(false)
  products  Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String
  hex       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model OrderToProduct {
  A String
  B Int

  @@unique([A, B], map: "_OrderToProduct_AB_unique")
  @@index([B], map: "_OrderToProduct_B_index")
  @@map("_OrderToProduct")
}

model ProductToTag {
  A Int
  B Int

  @@unique([A, B], map: "_ProductToTag_AB_unique")
  @@index([B], map: "_ProductToTag_B_index")
  @@map("_ProductToTag")
}

enum FeaturedStatus {
  NOT_FEATURED
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
}
