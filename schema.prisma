generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Order {
  id          String       @id @default(cuid())
  total       Float?
  address     String?
  phone       String?
  email       String?
  name        String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      OrderStatus? @default(PENDING)
  products    Product[]
}

model Product {
  id               Int             @id @default(autoincrement())
  name             String
  price            Float
  inventory        Int
  description      String
  colorId          Int?
  images           Json[]
  brandId          Int?
  discount         Float?
  slug             String          @unique
  nameMeta         String?
  descriptionMeta  String?
  categoryId       Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isDeleted        Boolean?        @default(false)
  reviews          Review[]
  category         Category        @relation(fields: [categoryId], references: [id])
  orders           Order[]
  AttributeValue   AttributeValue? @relation(fields: [attributeValueId], references: [id])
  attributeValueId Int?

  @@index([categoryId])
  @@index([brandId])
  @@index([colorId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Category {
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  slug      String         @unique
  status    FeaturedStatus @default(NOT_FEATURED)
  thumbnail Json[]
  id        Int            @id @default(autoincrement())
  isDeleted Boolean?       @default(false)
  products  Product[]
}

model Attribute {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attributeValues AttributeValue[]
}

model AttributeValue {
  id          Int       @id @default(autoincrement())
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  Attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId Int
}

model OrderToProduct {
  A String
  B Int

  @@unique([A, B], map: "_OrderToProduct_AB_unique")
  @@index([B], map: "_OrderToProduct_B_index")
  @@map("_OrderToProduct")
}

enum FeaturedStatus {
  NOT_FEATURED
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  REFUNDED
  SHIPPED
  DELIVERED
}
